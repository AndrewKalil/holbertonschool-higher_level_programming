======================
TEST CASES FOR TASK 7
======================

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("width", 89)

>>> bg.integer_validator("my_int", -1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/andrew/Main/Holberton_projects/holbertonschool-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 30, in integer_validator
    raise ValueError("{:s} must be greater than 0".format(name))
ValueError: my_int must be greater than 0

>>> bg.integer_validator("my_int", "string")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/andrew/Main/Holberton_projects/holbertonschool-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 28, in integer_validator
    raise TypeError("{:s} must be an integer".format(name))
TypeError: my_int must be an integer

>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] name must be an integer

>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] age must be greater than 0

>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

>>> try:
...     bg.integer_validator("float", 1.1111)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] float must be an integer

>>> try:
...     bg.integer_validator("bool", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] bool must be an integer

>>> try:
...     bg.integer_validator("number", 1)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...

>>> try:
...     print(bg.area())
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[Exception] area() is not implemented

>>> try:
...     bg.integer_validator("number", 1, 2)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] integer_validator() takes 3 positional arguments but 4 were given

>>> try:
...     bg.integer_validator()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> try:
...     bg.integer_validator("no args")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] integer_validator() missing 1 required positional argument: 'value'

>>> try:
...     bg.integer_validator("", 12)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...

